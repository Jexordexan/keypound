! function(global, factory) { "object" == typeof exports && "undefined" != typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define(factory) : global.keypound = factory() }(this, function() {
  "use strict";

  function code(x) { return MAP[x] || x.toUpperCase().charCodeAt(0) }

  function getKeys(key) {
    var keys = key.replace(/\s/g, "").split(","),
      last = keys.length - 1;
    return "" === keys[last] && (keys[last - 1] += ",", keys = keys.slice(0, -1)), keys
  }

  function getMods(key) {
    var _mods = { shiftKey: !1, altKey: !1, ctrlKey: !1, metaKey: !1 };
    return key.slice(0, -1).forEach(function(mod) {
      var keyCode = MODIFIERS[mod],
        modName = MODIFIER_MAP[keyCode];
      _mods[modName] = !0
    }), _mods
  }

  function modifiersMatch(mods, event) { return MODIFIER_LIST.every(function(modName) { return mods[modName] === event[modName] }) }
  for (var MODIFIERS = { "⇧": 16, shift: 16, "⌥": 18, alt: 18, option: 18, "⌃": 17, ctrl: 17, control: 17, "⌘": 91, command: 91 }, MODIFIER_MAP = { 16: "shiftKey", 18: "altKey", 17: "ctrlKey", 91: "metaKey" }, MODIFIER_LIST = Object.keys(MODIFIER_MAP).map(function(keyCode) { return MODIFIER_MAP[keyCode] }), MAP = { backspace: 8, tab: 9, clear: 12, enter: 13, return: 13, esc: 27, escape: 27, space: 32, left: 37, up: 38, right: 39, down: 40, del: 46, delete: 46, home: 36, end: 35, pageup: 33, pagedown: 34, ",": 188, ".": 190, "/": 191, "`": 192, "-": 189, "=": 187, ";": 186, "'": 222, "[": 219, "]": 221, "\\": 220 }, k = 1; k < 20; k++) MAP["f" + k] = 111 + k;
  var classCallCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function") },
    createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor)
        }
      }
      return function(Constructor, protoProps, staticProps) { return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor }
    }(),
    slicedToArray = function() {
      function sliceIterator(arr, i) {
        var _arr = [],
          _n = !0,
          _d = !1,
          _e = void 0;
        try { for (var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i || _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err } finally { try {!_n && _i.return && _i.return() } finally { if (_d) throw _e } }
        return _arr
      }
      return function(arr, i) { if (Array.isArray(arr)) return arr; if (Symbol.iterator in Object(arr)) return sliceIterator(arr, i); throw new TypeError("Invalid attempt to destructure non-iterable instance") }
    }(),
    Context = function() {
      function Context(context, master) {
        var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        classCallCheck(this, Context), this.name = context, this._block = options.block || !1, this._paused = !1, this._master = master, this._bindings = {}
      }
      return createClass(Context, [{ key: "__dispatch", value: function(event) { if (this._paused) return !1; var key = event.keyCode; return key in this._bindings ? (this._bindings[key].filter(function(binding) { return modifiersMatch(binding.mods, event) }).forEach(function(binding) { return binding.handler(event, binding) }), !0) : this._block } }, {
        key: "on",
        value: function(shortcut, handler, options) {
          var _this = this;
          getKeys(shortcut).forEach(function(key) {
            var mods = [];
            key = key.split("+"), mods = getMods(key), key.length > 1 && (key = [key[key.length - 1]]), key = key[0], key = code(key), key in _this._bindings || (_this._bindings[key] = []), _this._bindings[key].push({ key: key, handler: handler, mods: mods, options: options })
          })
        }
      }, {
        key: "off",
        value: function(shortcut) {
          var _this2 = this;
          getKeys(shortcut).forEach(function(key) { key = key.split("+"), key.length > 1 && (key = [key[key.length - 1]]), key = key[0], (key = code(key)) in _this2._bindings && delete _this2._bindings[key] })
        }
      }, { key: "exit", value: function() { this._master.exit(this.name) } }, { key: "pause", value: function() { this._paused = !0 } }, { key: "play", value: function() { this._paused = !1 } }]), Context
    }();
  return function() {
    function Keypound() {
      var _this = this;
      classCallCheck(this, Keypound), this.stack = [], document.addEventListener("keydown", function(event) { return _this.onKeyPress(event) })
    }
    return createClass(Keypound, [{ key: "enter", value: function(contextName, options) { var i = this.getStackIndex(contextName); return i > -1 ? this.moveToTop(i) : this.enterNewContext(contextName, options) } }, {
      key: "exit",
      value: function(contextName) {
        var i = this.getStackIndex(contextName);
        i > -1 && this.stack.splice(i, 1)
      }
    }, { key: "onKeyPress", value: function(event) { for (var i = this.stack.length, handled = !1; !handled && i--;) handled = this.stack[i].__dispatch(event) } }, {
      key: "moveToTop",
      value: function(index) {
        var _stack$splice = this.stack.splice(index, 1),
          _stack$splice2 = slicedToArray(_stack$splice, 1),
          context = _stack$splice2[0];
        return this.stack.push(context), context
      }
    }, { key: "enterNewContext", value: function(name, options) { var context = new Context(name, this, options); return this.stack.push(context), context } }, { key: "getStackIndex", value: function(contextName) { return this.stack.findIndex(function(c) { return c.name === contextName }) } }]), Keypound
  }()
});
//# sourceMappingURL=dist/keypound.min.js.map
